-- Create announcements table
CREATE TABLE IF NOT EXISTS public.announcements (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    author TEXT NOT NULL,
    department TEXT NOT NULL,
    priority TEXT NOT NULL CHECK (priority IN ('high', 'medium', 'low')),
    pinned BOOLEAN NOT NULL DEFAULT false,
    views INTEGER NOT NULL DEFAULT 0,
    likes INTEGER NOT NULL DEFAULT 0,
    comments INTEGER NOT NULL DEFAULT 0,
    tags TEXT[] NOT NULL DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE
);

-- Create RLS policies
ALTER TABLE public.announcements ENABLE ROW LEVEL SECURITY;

-- Policy for viewing announcements
CREATE POLICY "Users can view all announcements" ON public.announcements
    FOR SELECT
    USING (true);

-- Policy for creating announcements
CREATE POLICY "Users with role level <= 3 can create announcements" ON public.announcements
    FOR INSERT
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM public.users u
            JOIN public.roles r ON u.role_id = r.id
            WHERE u.id = auth.uid()
            AND r.level <= 3
        )
    );

-- Policy for updating announcements
CREATE POLICY "Users can update their own announcements or department announcements if authorized" ON public.announcements
    FOR UPDATE
    USING (
        EXISTS (
            SELECT 1 FROM public.users u
            JOIN public.roles r ON u.role_id = r.id
            WHERE u.id = auth.uid()
            AND (
                -- Admin can update all
                r.level = 1
                -- Senior VP can update all
                OR r.level = 2
                -- VP can update own department
                OR (r.level = 3 AND u.department = announcements.department)
                -- Author can update own
                OR u.id = announcements.user_id
            )
        )
    );

-- Policy for deleting announcements
CREATE POLICY "Users can delete their own announcements or department announcements if authorized" ON public.announcements
    FOR DELETE
    USING (
        EXISTS (
            SELECT 1 FROM public.users u
            JOIN public.roles r ON u.role_id = r.id
            WHERE u.id = auth.uid()
            AND (
                -- Admin can delete all
                r.level = 1
                -- Senior VP can delete own department
                OR (r.level = 2 AND u.department = announcements.department)
                -- Author can delete own
                OR u.id = announcements.user_id
            )
        )
    );

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger for updated_at
CREATE TRIGGER handle_announcements_updated_at
    BEFORE UPDATE ON public.announcements
    FOR EACH ROW
    EXECUTE PROCEDURE public.handle_updated_at(); 